# Inspired from JHipster 4.6.1 and angular-cli 1.7.2
# Add custom rules.
# Rules already in tslint:latest and tslint:recommanded on 07-03-2018 not added.
---
# rulesDirectory:
# - node_modules/codelyzer
extends:
  # See https://github.com/palantir/tslint/tree/master/src/configs
  "tslint:all"
rules:
  # TSLINT
  # https://palantir.github.io/tslint/rules/
  # https://github.com/palantir/tslint/tree/master/test/rules
  # =========================
  # |    TypeScript-specific
  # |    These rules find errors related to TypeScript features:
  # =========================
  no-any: false
  no-empty-interface: false
  no-inferrable-types:
    - true
    - ignore-params
  no-magic-numbers: false
  no-non-null-assertion: true,
  member-access: false
  member-ordering:
  - true
  - order:
    - static-field
    - instance-field
    - static-method
    - instance-method
  promise-function-async: true
  typedef:
    type: array
    items:
      type: string
      enum:
      - call-signature
      - arrow-call-signature
      - parameter
      - arrow-parameter
      - property-declaration
        # - variable-declaration
      - member-variable-declaration
      - object-destructuring
      - array-destructuring
    minLength: 0
    maxLength: 7
  # =========================
  # |   Functionality
  # |   These rules catch common errors in JS programming or otherwise confusing
  # |   constructs that are prone to producing bugs:
  # =========================
  await-promise: true
  # false in angular project because ng generate this.
  no-empty: true
  no-console:
    - false
  # false in angular project because ng generate this.
  no-floating-promises: true
  no-for-in-array: true
  no-submodule-imports: false
  no-switch-case-fall-through: true
  no-unbound-method: true
  # false in angular project (some "unecessary class" should exists)
  no-unnecessary-class: true
  restrict-plus-operands: true
  # =========================
  # |   Maintainability
  # |   These rules make code maintenance easier:
  # =========================
  deprecation: true
  eofline: true
  indent:
    - true
    - spaces
  max-line-length:
    - true
    - limit: 80
      # Chararcter '*' or '\*' doesn't work
      ignore-pattern: '^\s*// http://|^\s*// https://|^\s*// See http://|^\s*// See https://'
  no-use-before-declare: true
  trailing-comma:
    - true
    - multiline:
        objects: never
        arrays: never
        functions: never
        typeLiterals: never
      esSpecCompliant: true
  # =========================
  # |   Style
  # |   These rules enforce consistent style across your codebase:
  # =========================
  align: true
  # not interesting to use type T[] instead of Array<any>
  # In file ../back/entities/abstract/abstract.route.ts when I use T[] I have
  # an error with spread notation.
  # On Github I've found that use Array<any> can give the same error.
  # TODO resolve it.
  array-type: false
  arrow-parens: false
  # false in angular project because ng generate this
  callable-types: true
  comment-format: false
  binary-expression-operand-order: true
  encoding: true
  import-blacklist:
    - true
    - rxjs
    - rxjs/Rx
  interface-name: false # could be true in a future project
  no-parameter-properties: false
  number-literal-format: true
  object-literal-sort-keys: false
  ordered-imports: false
  prefer-method-signature: true
  prefer-template: false
  prefer-switch: true
  quotemark:
    - true
    - single
  space-before-function-paren: false # not my style (myFunc())
  switch-final-break: true
  type-literal-delimiter: true
  variable-name:
    options:
      - ban-keywords
      - check-format
      - allow-pascal-case
      - allow-leading-underscore
  # # =========
  # # |  COEDLYSER
  # # =========
  # # In angular-cli 1.7.2
  # directive-selector:
  #   - true
  #   - attribute
  #   - app
  #   - camelCase
  # component-selector:
  #   - true
  #   - element
  #   - app
  #   - kebab-case
  # no-output-on-prefix: true
  # use-input-property-decorator: true
  # use-output-property-decorator: true
  # use-host-property-decorator: true
  # no-input-rename: true
  # no-output-rename: true
  # use-life-cycle-interface: true
  # use-pipe-transform-interface: true
  # component-class-suffix: true
  # directive-class-suffix: true
  # # # In JHipster 4.6.1
  # # # Doesn't work
  # # no-access-missing-member: true
  # # templates-use-public: true
  # # invoke-injectable: true
